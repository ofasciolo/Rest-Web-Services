package com.appdeveloperblog.app.ws.service.impl;

import java.util.ArrayList;
import java.util.Objects;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.appdeveloperblog.app.ws.io.entity.UserEntity;
import com.appdeveloperblog.app.ws.io.repositories.UserRepository;
import com.appdeveloperblog.app.ws.service.UserService;
import com.appdeveloperblog.app.ws.shared.Utils;
import com.appdeveloperblog.app.ws.shared.dto.UserDTO;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository; 
	
	@Autowired
	Utils utils; 
	
	@Autowired
	BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Override
	public UserDTO createUser(UserDTO user) {
		
		UserEntity storedUserDetails = userRepository.findByEmail(user.getEmail());
		if(Objects.nonNull(storedUserDetails)) {
			throw new RuntimeException("Record already exists");
		}
		UserEntity userEntity = new UserEntity(); 
		BeanUtils.copyProperties(user, userEntity);
		
		String publicUserId = utils.generateUserId(30);
		userEntity.setUserId(publicUserId);
		userEntity.setEncryptedPassword(bCryptPasswordEncoder.encode(user.getPassword()));
		
		UserEntity savedUserDetails = userRepository.save(userEntity);
		
		UserDTO userDto = new UserDTO(); 
		BeanUtils.copyProperties(savedUserDetails, userDto);
		
		return userDto;
	}

	@Override
	public UserDTO getUser(String email) {
		UserEntity userEntity = userRepository.findByEmail(email);
		if(Objects.isNull(userEntity)) {
			throw new RuntimeException("Record already exists");
		}
		UserDTO returnValue = new UserDTO(); 
		BeanUtils.copyProperties(userEntity, returnValue);
		return returnValue;
	}
	
	@Override
	public UserDTO getUserByUserId(String userId) {
		
		UserDTO returnValue = new UserDTO(); 
		
		UserEntity userEntity = userRepository.findByUserId(); 
		if(Objects.isNull(userEntity)) {
			throw new UsernameNotFoundException(userId); 
		}
		
		BeanUtils.copyProperties(userEntity, returnValue);
		
		return returnValue; 
	}
	
	@Override
	public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		UserEntity userEntity = userRepository.findByEmail(email);
		if(Objects.isNull(userEntity)) {
			throw new UsernameNotFoundException(email); 
		}
		return new User(userEntity.getEmail(), userEntity.getEncryptedPassword(), new ArrayList<>());
	}
}
